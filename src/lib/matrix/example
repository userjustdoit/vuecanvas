/**
 * @author userjustdoit
 * @des  矩阵基本用法
 */

    /****************/
    1.eye( n )

    生产n×n的对角矩阵，就像下面的例子：

    //生成4×4的对角矩阵
    var a = Matrix.eye( 4 );
    console.log( a );

    /!*
    [
        [1, 0, 0, 0],
        [0, 1, 0, 1],
        [0, 0, 1, 0],
        [0, 0, 0, 1]
    ]
    *!/

    /****************/
    2.ones( m, n )

    生成全为1的m×n的矩阵：

    var a = Matrix.ones( 4, 5 );
    console.log( a );

    /*
    [
      [1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1]
    ]
    */

  /****************/
   3.zeros( m, n )

   生成m×n的全0的矩阵

   var a = Matrix.zeros( 4, 5 );
   console.log( a );

   /*
   [
   	[0, 0, 0, 0, 0],
   	[0, 0, 0, 0, 0],
   	[0, 0, 0, 0, 0],
   	[0, 0, 0, 0, 0]
   ]
   */

   /****************/
   4.add( M1, M2 )

   返回两个矩阵之和的结果，注意，两个矩阵的行列都必须严格相等。

   var M1 = Matrix.eye( 3 );
   var M2 = Matrix.ones( 3, 3 );

   var result = Matrix.add( M1, M2 );
   console.log( result );

   /*
   [
   	[2, 1, 1],
   	[1,	2, 1],
   	[1, 1, 2]
   ]
   */

   /****************/
   5.sub( M1, M2 )

   返回两个矩阵相减的结果，注意，两个矩阵的行列都必须严格相等。

   var M1 = Matrix.eye( 3 );
   var M2 = Matrix.ones( 3, 3 );

   var result = Matrix.sub( M1, M2 );
   console.log( result );

   /*
   [
   	[0, -1, -1],
   	[-1, 0, -1],
   	[-1, -1, 0]
   ]
   */

   /****************/
   6.multip( M1, number )

   返回一个矩阵与某一个数的数乘结果。

   var M1 = Matrix.ones( 3, 3 );

   var result = Matrix.multip( M1, 3 );
   console.log( result );

   /*
   [
   	[3, 3, 3],
   	[3, 3, 3],
   	[3, 3, 3]
   ]
   */

   /****************/
   7.dot( M1, M2 )

   返回两个矩阵相乘的结果，注意第一个矩阵的列数一定要等于第二个矩阵的行数。

   var M1 = [[1,2,3,4]];
   var M2 = [[1], [2], [3], [4]];

   var result = Matrix.dot( M1, M2 );
   console.log( result );

   /*
   [
   	[30]
   ]
   */

   /****************/
   8.transpose( M1 )

   返回M1矩阵的转置矩阵。

   var M1 = [[1,2,3,4]];

   var result = Matrix.transpose( M1 );
   console.log( result );

   /*
   [
   	[1], [2], [3], [4]
   ]
   */
